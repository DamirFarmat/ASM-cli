"""
Web Technology Analyzer

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç WhatWeb –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–æ–º–µ–Ω–æ–≤.
–¢—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π WhatWeb: https://github.com/urbanadventurer/WhatWeb
"""

from __future__ import annotations

import json
import re
import subprocess
import sys
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

from colorama import Fore, Style, init
from tabulate import tabulate

from utils.target_loader import TargetLoader
from modules.reporters import MXTHTMLReporter

init()


class WebAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π —á–µ—Ä–µ–∑ WhatWeb.
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—á–Ω—ã–π –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –æ–±—â–∏–π HTML-–æ—Ç—á–µ—Ç.
    """

    def __init__(self, whatweb_path: str = "whatweb") -> None:
        self.whatweb_path = whatweb_path
        self.target_loader = TargetLoader()
        self.reporter = MXTHTMLReporter()

    def _check_whatweb_installed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ WhatWeb"""
        try:
            result = subprocess.run(
                [self.whatweb_path, "--version"],
                capture_output=True,
                text=True,
                timeout=10
            )
            return result.returncode == 0
        except (subprocess.TimeoutExpired, FileNotFoundError, subprocess.SubprocessError):
            return False

    def _run_whatweb(self, domain: str) -> Optional[Dict[str, Any]]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç WhatWeb –¥–ª—è –¥–æ–º–µ–Ω–∞ –∏ –ø–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not domain.startswith(('http://', 'https://')):
                url = f"http://{domain}"
            else:
                url = domain

            # –ó–∞–ø—É—Å–∫–∞–µ–º WhatWeb —Å JSON –≤—ã–≤–æ–¥–æ–º
            cmd = [
                self.whatweb_path,
                "--no-errors",  # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏
                "--json",        # JSON —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
                url
            ]

            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤–µ–±-–∑–∞–ø—Ä–æ—Å–æ–≤
            )

            if result.returncode != 0:
                print(f"{Fore.RED}[{domain}] WhatWeb error: {result.stderr}{Style.RESET_ALL}")
                return None

            # –ü–∞—Ä—Å–∏–º JSON –≤—ã–≤–æ–¥
            try:
                data = json.loads(result.stdout)
                return data
            except json.JSONDecodeError:
                # Fallback: –ø–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥
                return self._parse_text_output(result.stdout, domain)

        except subprocess.TimeoutExpired:
            print(f"{Fore.RED}[{domain}] WhatWeb timeout{Style.RESET_ALL}")
            return None
        except Exception as e:
            print(f"{Fore.RED}[{domain}] WhatWeb error: {e}{Style.RESET_ALL}")
            return None

    def _parse_text_output(self, output: str, domain: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥ WhatWeb –µ—Å–ª–∏ JSON –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        data = {
            "target": {"uri": domain},
            "plugins": {}
        }

        # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –≤—ã–≤–æ–¥–µ
        lines = output.split('\n')
        for line in lines:
            line = line.strip()
            if not line:
                continue

            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞: [200] Server[nginx/1.18.0], PoweredBy[WordPress]
            if '[' in line and ']' in line:
                parts = line.split(']', 1)
                if len(parts) == 2:
                    status_part = parts[0].strip('[')
                    info_part = parts[1].strip()

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å
                    if status_part.isdigit():
                        data["target"]["status"] = int(status_part)

                    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö
                    if info_part:
                        tech_matches = re.findall(r'(\w+)\[([^\]]*)\]', info_part)
                        for tech_name, tech_value in tech_matches:
                            if tech_name not in data["plugins"]:
                                data["plugins"][tech_name] = []
                            data["plugins"][tech_name].append(tech_value)

        return data

    def _extract_technologies(self, whatweb_data: Dict[str, Any]) -> List[Tuple[str, str, str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö WhatWeb"""
        technologies = []
        
        if not whatweb_data or "plugins" not in whatweb_data:
            return technologies

        plugins = whatweb_data["plugins"]
        
        for plugin_name, plugin_data in plugins.items():
            if isinstance(plugin_data, list):
                for item in plugin_data:
                    if isinstance(item, dict):
                        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        version = item.get("version", "")
                        name = item.get("name", "")
                        if version and name:
                            technologies.append((plugin_name, name, version))
                        elif name:
                            technologies.append((plugin_name, name, ""))
                        elif version:
                            technologies.append((plugin_name, plugin_name, version))
                    else:
                        # –ü—Ä–æ—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                        technologies.append((plugin_name, str(item), ""))
            elif isinstance(plugin_data, dict):
                # –û–¥–∏–Ω–æ—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
                version = plugin_data.get("version", "")
                name = plugin_data.get("name", "")
                if version and name:
                    technologies.append((plugin_name, name, version))
                elif name:
                    technologies.append((plugin_name, name, ""))
                elif version:
                    technologies.append((plugin_name, plugin_name, version))
            else:
                # –ü—Ä–æ—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                technologies.append((plugin_name, str(plugin_data), ""))

        return technologies

    def _analyze_domain(self, domain: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–æ–º–µ–Ω–∞"""
        analysis = {
            'domain': domain,
            'technologies': [],
            'status': None,
            'server_info': {},
            'frameworks': [],
            'cms': [],
            'languages': [],
            'databases': [],
            'web_servers': [],
            'other_tech': []
        }

        # –ó–∞–ø—É—Å–∫–∞–µ–º WhatWeb
        whatweb_data = self._run_whatweb(domain)
        if not whatweb_data:
            return analysis

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å
        if "target" in whatweb_data and "status" in whatweb_data["target"]:
            analysis['status'] = whatweb_data["target"]["status"]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        technologies = self._extract_technologies(whatweb_data)
        analysis['technologies'] = technologies

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        for tech_type, tech_name, tech_version in technologies:
            tech_info = f"{tech_name}{' ' + tech_version if tech_version else ''}"
            
            # –í–µ–±-—Å–µ—Ä–≤–µ—Ä—ã
            if tech_type.lower() in ['server', 'httpserver', 'apache', 'nginx', 'iis']:
                analysis['web_servers'].append(tech_info)
            
            # CMS
            elif tech_type.lower() in ['wordpress', 'joomla', 'drupal', 'magento', 'opencart']:
                analysis['cms'].append(tech_info)
            
            # –§—Ä–µ–π–º–≤–æ—Ä–∫–∏
            elif tech_type.lower() in ['framework', 'laravel', 'django', 'rails', 'spring', 'asp.net']:
                analysis['frameworks'].append(tech_info)
            
            # –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            elif tech_type.lower() in ['php', 'python', 'ruby', 'java', 'asp', 'dotnet']:
                analysis['languages'].append(tech_info)
            
            # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            elif tech_type.lower() in ['mysql', 'postgresql', 'mongodb', 'redis', 'sqlite']:
                analysis['databases'].append(tech_info)
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
            else:
                analysis['other_tech'].append(tech_info)

        return analysis

    def _display_domain_analysis(self, domain: str, analysis: Dict[str, Any]) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞"""
        print(f"{Fore.GREEN}–î–û–ú–ï–ù: {domain}{Style.RESET_ALL}")
        print(f"{Fore.GREEN}{'-' * (len(domain) + 8)}{Style.RESET_ALL}")

        # –°—Ç–∞—Ç—É—Å
        if analysis['status']:
            status_color = Fore.GREEN if analysis['status'] == 200 else Fore.YELLOW
            print(f"\n{Fore.BLUE}–°—Ç–∞—Ç—É—Å:{Style.RESET_ALL} {status_color}{analysis['status']}{Style.RESET_ALL}")

        # –í–µ–±-—Å–µ—Ä–≤–µ—Ä—ã
        if analysis['web_servers']:
            print(f"\n{Fore.BLUE}–í–µ–±-—Å–µ—Ä–≤–µ—Ä—ã:{Style.RESET_ALL}")
            for server in analysis['web_servers']:
                print(f"  üñ•Ô∏è  {server}")

        # CMS
        if analysis['cms']:
            print(f"\n{Fore.BLUE}CMS:{Style.RESET_ALL}")
            for cms in analysis['cms']:
                print(f"  üìù {cms}")

        # –§—Ä–µ–π–º–≤–æ—Ä–∫–∏
        if analysis['frameworks']:
            print(f"\n{Fore.BLUE}–§—Ä–µ–π–º–≤–æ—Ä–∫–∏:{Style.RESET_ALL}")
            for framework in analysis['frameworks']:
                print(f"  ‚öôÔ∏è  {framework}")

        # –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        if analysis['languages']:
            print(f"\n{Fore.BLUE}–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:{Style.RESET_ALL}")
            for lang in analysis['languages']:
                print(f"  üíª {lang}")

        # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if analysis['databases']:
            print(f"\n{Fore.BLUE}–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:{Style.RESET_ALL}")
            for db in analysis['databases']:
                print(f"  üóÑÔ∏è  {db}")

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        if analysis['other_tech']:
            print(f"\n{Fore.BLUE}–î—Ä—É–≥–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:{Style.RESET_ALL}")
            for tech in analysis['other_tech']:
                print(f"  üîß {tech}")

        # –û–±—â–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
        if analysis['technologies']:
            print(f"\n{Fore.BLUE}–í—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:{Style.RESET_ALL}")
            tech_data = []
            for tech_type, tech_name, tech_version in analysis['technologies']:
                tech_data.append([tech_type, tech_name, tech_version or 'N/A'])
            print(tabulate(tech_data, headers=['–¢–∏–ø', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–í–µ—Ä—Å–∏—è'], tablefmt='grid'))

    def run(self, domains: List[str], save_html: bool = False) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ–º–µ–Ω–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É WhatWeb
        if not self._check_whatweb_installed():
            print(f"{Fore.RED}–û–®–ò–ë–ö–ê: WhatWeb –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω{Style.RESET_ALL}")
            print(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WhatWeb: https://github.com/urbanadventurer/WhatWeb")
            print(f"–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∫–ª–∞—Å—Å–∞")
            return

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–º–µ–Ω—ã, –±–µ–∑ IP
        seen: set = set()
        target_domains: List[str] = []
        for d in domains:
            if d in seen:
                continue
            if self.target_loader._is_valid_domain(d) and not self.target_loader._is_valid_ip(d):
                target_domains.append(d)
                seen.add(d)

        if not target_domains:
            print(f"{Fore.YELLOW}–í–æ –≤—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è --web{Style.RESET_ALL}")
            return

        print(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–µ–±-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π: {len(target_domains)}")
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è WhatWeb: {self.whatweb_path}")

        html_sections: List[Tuple[str, str]] = []
        all_results: Dict[str, Any] = {}

        for d in target_domains:
            print(f"\n{Fore.CYAN}–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: {d}{Style.RESET_ALL}")
            
            analysis = self._analyze_domain(d)
            all_results[d] = analysis
            
            self._display_domain_analysis(d, analysis)

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è HTML –æ—Ç—á–µ—Ç–∞
            if save_html:
                tech_rows = []
                for tech_type, tech_name, tech_version in analysis['technologies']:
                    status = 'Passed'  # –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è —É—Å–ø–µ—à–Ω—ã–º–∏
                    tech_info = f"{tech_name}{' ' + tech_version if tech_version else ''}"
                    tech_rows.append([status, f"Tech: {tech_type}", tech_info, ""])
                
                if tech_rows:
                    html_sections.append((d, self.reporter.build_domain_table(tech_rows)))
                else:
                    # –ï—Å–ª–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                    no_tech_row = [['Warning', 'Web Technologies', 'No technologies detected', '']]
                    html_sections.append((d, self.reporter.build_domain_table(no_tech_row)))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –æ—Ç—á–µ—Ç
        if save_html and html_sections:
            from datetime import datetime
            from pathlib import Path
            reports_dir = Path('reports')
            reports_dir.mkdir(parents=True, exist_ok=True)
            ts = datetime.now().strftime('%Y%m%d_%H%M%S')
            out = reports_dir / f"web_analyzer_report_{ts}.html"
            html = self.reporter.wrap_global(html_sections)
            out.write_text(html, encoding='utf-8')
            print(f"\n{Fore.GREEN}HTML –æ—Ç—á–µ—Ç: {out.resolve()}{Style.RESET_ALL}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –æ—Ç—á–µ—Ç
        if all_results:
            json_path = reports_dir / f"web_analyzer_report_{ts}.json"
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(all_results, f, ensure_ascii=False, indent=2)
            print(f"{Fore.GREEN}JSON –æ—Ç—á–µ—Ç: {json_path.resolve()}{Style.RESET_ALL}")
